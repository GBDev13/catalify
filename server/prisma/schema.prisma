generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  customerId   String?
  subscription Subscription[]

  @@map("users")
}

model Company {
  id        String    @id @default(uuid())
  slug      String    @unique
  name      String
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  ownerId   String

  themeColor String @default("#6366f1") @db.VarChar(7)

  users                User[]
  products             Product[]
  categories           Category[]
  productVariants      ProductVariant[]
  ProductVariantOption ProductVariantOption[]

  logo   File?   @relation(fields: [logoId], references: [id])
  logoId String?

  links   CompanyLinks[]
  banners CompanyBanners[]
  order   Order[]

  @@map("companies")
}

model OrderProducts {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  price      Float
  promoPrice Float?
  quantity   Int

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  selectedVariants ProductVariantOption[]

  @@map("order_products")
}

enum OrderStatus {
  PENDING
  FINISHED
  EXPIRED
}

model Order {
  id         String @id
  buyerName  String
  buyerPhone String

  status OrderStatus @default(PENDING)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  expiresAt DateTime

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  products OrderProducts[]

  @@map("orders")
}

model Product {
  id          String    @id @default(uuid())
  slug        String?   @default("product-slug")
  name        String
  price       Float
  promoPrice  Float?
  description String?   @db.VarChar(800)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  isHighlighted Boolean? @default(false)

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  variants ProductVariant[]

  pictures      File[]
  orderProducts OrderProducts[]

  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  slug      String?
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  products  Product[]
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@map("categories")
}

model ProductVariant {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  company   Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  options   ProductVariantOption[]

  @@map("product_variants")
}

model ProductVariantOption {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  orderProducts OrderProducts[]

  @@map("product_variant_options")
}

model File {
  id        String   @id @default(uuid())
  fileName  String
  fileUrl   String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  company        Company[]
  companyBanners CompanyBanners[]
}

model CompanyLinks {
  id        String    @id @default(uuid())
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@map("company_links")
}

model CompanyBanners {
  id        String    @id @default(uuid())
  url       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  picture   File   @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  pictureId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@map("company_banners")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  CANCELING
  EXPIRED
}

model Subscription {
  id        String             @id @default(uuid())
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  expiresAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("subscriptions")
}
